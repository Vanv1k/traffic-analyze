from fastapi import FastAPI, File, UploadFile, Form, HTTPException
from fastapi.responses import FileResponse
from pydantic import BaseModel
import psycopg2
from dotenv import load_dotenv
import os
from celery import Celery
from video_processor import VideoProcessor
import shutil
from fastapi import FastAPI, File, UploadFile, Form, HTTPException, Path, Query
from fastapi.responses import FileResponse
from pydantic import BaseModel, Field
from typing import List, Dict, Union, Optional

load_dotenv()

app = FastAPI(
    title="Traffic Analysis API",
    description="API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ —Å –¥—Ä–æ–Ω–æ–≤",
    version="1.0.0",
)

from fastapi.middleware.cors import CORSMiddleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

db_config = {
    "dbname": os.getenv("DB_NAME"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "host": os.getenv("DB_HOST"),
    "port": os.getenv("DB_PORT")
}

class HTTPErrorResponse(BaseModel):
    detail: str

# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
class DroneResponse(BaseModel):
    drone_id: int
    drone_name: str
    description: str

class MissionResponse(BaseModel):
    mission_id: int
    drone_id: int
    video_path: str
    fps: int

class TrackedObjectResponse(BaseModel):
    object_id: int
    mission_id: int
    class_name: str
    confidence: float
    frame_number: int
    x: int
    y: int
    width: int
    height: int

class DroneCreate(BaseModel):
    drone_name: str
    description: str

@app.get("/drones", 
    response_model=List[DroneResponse],
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥—Ä–æ–Ω–æ–≤",
    responses={
        200: {"description": "–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å"},
        500: {"model": HTTPErrorResponse, "description": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    })
async def get_drones():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥—Ä–æ–Ω–æ–≤"""
    conn = psycopg2.connect(**db_config)
    cursor = conn.cursor()
    cursor.execute("SELECT drone_id, drone_name, description FROM drones")
    drones = [{"drone_id": row[0], "drone_name": row[1], "description": row[2]} for row in cursor.fetchall()]
    cursor.close()
    conn.close()
    return drones

class DroneCreateRequest(BaseModel):
    drone_name: str
    description: str

@app.post("/drones", 
    response_model=Dict[str, int],
    summary="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥—Ä–æ–Ω",
    responses={
        200: {"description": "–î—Ä–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"},
        400: {"model": HTTPErrorResponse, "description": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"},
        500: {"model": HTTPErrorResponse, "description": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    })
async def create_drone(drone: DroneCreateRequest):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥—Ä–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(**db_config)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO drones (drone_name, description) VALUES (%s, %s) RETURNING drone_id",
            (drone.drone_name, drone.description)
        )
        drone_id = cursor.fetchone()[0]
        conn.commit()
        cursor.close()
        conn.close()
        return {"drone_id": drone_id}
    except psycopg2.OperationalError as e:
        raise HTTPException(status_code=500, detail=f"Database connection error: {str(e)}")
    except psycopg2.Error as e:
        raise HTTPException(status_code=400, detail=f"Database error: {str(e)}")

@app.post("/upload", 
    summary="–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
    responses={
        200: {
            "description": "–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
            "content": {
                "application/json": {
                    "example": {
                        "message": "Video processed",
                        "output_path": "results/processed_video.mp4",
                        "mission_id": 1
                    }
                }
            }
        },
        400: {"model": HTTPErrorResponse, "description": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"},
        500: {"model": HTTPErrorResponse, "description": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"}
    })
async def upload_video(
    drone_id: int = Form(..., description="ID –¥—Ä–æ–Ω–∞", example=1),
    file: UploadFile = File(..., description="–í–∏–¥–µ–æ—Ñ–∞–π–ª (MP4, MOV)")
):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    try:
        file_path = f"uploads/{file.filename}"
        with open(file_path, "wb") as buffer:
            buffer.write(await file.read())
        print("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω:", file_path)
        
        processed_path = f"results/processed_{file.filename}"

        processor = VideoProcessor(
            source_weights_path="../model/traffic_analysis.pt",
            source_video_path=file_path,
            target_video_path=processed_path,
            drone_id=drone_id,
            db_config=db_config
        )
        mission_id = processor.process_video()  
        print("–û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª:", processed_path)
        
        return {
            "message": "Video processed",
            "output_path": processed_path,
            "mission_id": mission_id
        }
    except psycopg2.OperationalError as e:
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Processing error: {str(e)}")


import subprocess



@app.api_route("/processed-video/{mission_id}", methods=["GET", "HEAD"], 
    summary="–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ",
    responses={
        200: {"description": "–í–∏–¥–µ–æ—Ñ–∞–π–ª"},
        404: {"model": HTTPErrorResponse, "description": "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"},
        500: {"model": HTTPErrorResponse, "description": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    })
async def get_processed_video(mission_id: int = Path(..., description="ID –º–∏—Å—Å–∏–∏", example=1)):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ ID –º–∏—Å—Å–∏–∏"""
    try:
        conn = psycopg2.connect(**db_config)
        cursor = conn.cursor()
        cursor.execute("SELECT video_path FROM missions WHERE mission_id = %s", (mission_id,))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        
        if not result:
            raise HTTPException(status_code=404, detail="Mission not found")
        
        video_path = result[0]
        if not os.path.exists(video_path):
            raise HTTPException(status_code=404, detail="Processed video not found")
        
        result_path = f"recoded_videos/{os.path.basename(video_path)}"

        # –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        subprocess.run([
            "ffmpeg", "-y",  # -y —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å, –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            "-i", video_path,
            "-vcodec", "libx264",
            "-acodec", "aac",
            "-movflags", "faststart",
            result_path
        ], check=True)
        print(f"üü° Trying to serve file: {result_path}")
        print("üü° Absolute path:", os.path.abspath(result_path))
        print("üü° Exists?", os.path.exists(result_path))
        print("–û—Ç–¥–∞–µ–º:", result_path)
   

        return FileResponse(result_path, media_type="video/mp4", filename=os.path.basename(result_path))
    except psycopg2.OperationalError as e:
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")


@app.get("/db", 
    summary="–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã",
    responses={
        200: {"description": "–î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"},
        400: {"model": HTTPErrorResponse, "description": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã"},
        500: {"model": HTTPErrorResponse, "description": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    })
async def get_db_data(
    table: str = Query(..., description="–ò–º—è —Ç–∞–±–ª–∏—Ü—ã", example="missions"),
    limit: int = Query(100, description="–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π", ge=1, le=1000)
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π"""
    valid_tables = ["drones", "missions", "tracked_objects"]
    if table not in valid_tables:
        raise HTTPException(status_code=400, detail="Invalid table name")
    
    conn = psycopg2.connect(**db_config)
    cursor = conn.cursor()
    cursor.execute(f"SELECT * FROM {table} LIMIT %s", (limit,))
    columns = [desc[0] for desc in cursor.description]
    data = [dict(zip(columns, row)) for row in cursor.fetchall()]
    cursor.close()
    conn.close()
    return data

@app.get("/filters/class_names",
    response_model=List[str],
    summary="–ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –æ–±—ä–µ–∫—Ç–æ–≤",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
    tags=["Filters"],
    responses={
        200: {
            "description": "–°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤",
            "content": {
                "application/json": {
                    "example": ["car", "truck", "person", "bicycle"]
                }
            }
        },
        500: {"model": HTTPErrorResponse, "description": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    })
def get_class_names():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tracked_objects"""
    conn = psycopg2.connect(**db_config)
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT class_name FROM tracked_objects")
    results = [row[0] for row in cursor.fetchall()]
    cursor.close()
    conn.close()
    return results

@app.get("/filters/mission_ids",
    response_model=List[int],
    summary="–ü–æ–ª—É—á–∏—Ç—å ID –≤—Å–µ—Ö –º–∏—Å—Å–∏–π",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ID –º–∏—Å—Å–∏–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é",
    tags=["Filters"],
    responses={
        200: {
            "description": "–°–ø–∏—Å–æ–∫ ID –º–∏—Å—Å–∏–π",
            "content": {
                "application/json": {
                    "example": [1, 2, 3, 4, 5]
                }
            }
        },
        500: {"model": HTTPErrorResponse, "description": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    })
def get_mission_ids():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ID –º–∏—Å—Å–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã missions"""
    conn = psycopg2.connect(**db_config)
    cursor = conn.cursor()
    cursor.execute("SELECT mission_id FROM missions ORDER BY mission_id")
    results = [row[0] for row in cursor.fetchall()]
    cursor.close()
    conn.close()
    return results

@app.get("/filters/drone_ids",
    response_model=List[Dict[str, Union[int, str]]],
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä–æ–Ω–æ–≤",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥—Ä–æ–Ω–æ–≤ —Å –∏—Ö ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏",
    tags=["Filters"],
    responses={
        200: {
            "description": "–°–ø–∏—Å–æ–∫ –¥—Ä–æ–Ω–æ–≤",
            "content": {
                "application/json": {
                    "example": [
                        {"drone_id": 1, "drone_name": "DJI Mavic 3"},
                        {"drone_id": 2, "drone_name": "Autel EVO II"}
                    ]
                }
            }
        },
        500: {"model": HTTPErrorResponse, "description": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    })
def get_drone_ids():
    conn = psycopg2.connect(**db_config)
    cursor = conn.cursor()
    cursor.execute("SELECT drone_id, drone_name FROM drones ORDER BY drone_id")
    results = [{"drone_id": row[0], "drone_name": row[1]} for row in cursor.fetchall()]
    cursor.close()
    conn.close()
    return results

@app.get("/download/{filename}",
    summary="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏",
    description="–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏",
    tags=["Download"],
    responses={
        200: {
            "description": "–í–∏–¥–µ–æ—Ñ–∞–π–ª",
            "content": {"video/mp4": {}}
        },
        404: {
            "model": HTTPErrorResponse,
            "description": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "content": {
                "application/json": {
                    "example": {"detail": "File not found"}
                }
            }
        },
        500: {"model": HTTPErrorResponse, "description": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    })
async def download_result(
    filename: str = Path(..., description="–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", example="processed_video.mp4")
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ results"""
    file_path = f"results/{filename}"
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="File not found")
    return FileResponse(file_path, filename=filename)